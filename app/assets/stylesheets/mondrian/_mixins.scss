@mixin validate-layout($definition) {
  $errors: ();

  $mondrian-options: map-get($mondrian, options);
  // @include debug($mondrian-options,"LAYOUT OPTIONS");

  @each $option, $values in $mondrian-options {

    $option_is_required:      map-get($values, required);
    $posible_option_values:   map-get($values, value);
    $posible_option_type:     type-of($posible_option_values);

    $errors: join($errors, "Type of posible_option_type '#{$posible_option_type}'.");
    //@include debug(type-of($posible_option_values),"TYPE OF VALUES");

    $definition_has_option:   map-has-key($definition, $option);
    $definition_option_value: map-get($definition, $option);

    $match_posible_value:     null;

    $errors: join($errors, "match_posible_value: '#{$match_posible_value}'");

    @if $option_is_required {
      @if $definition_has_option {
        @if $posible_option_type == list {

          $match_posible_value: map-has-key($posible_option_values, $definition_option_value);
          $errors: join($errors, "match_posible_value: '#{$match_posible_value}'");

          @if $definition_option_value {

          }
        }
        //$errors: join($errors, "The value for '#{$option}' option is invalid.");
      }
      @else {
        $errors: join($errors, "The option '#{$option}' is required.");
      }
    }
    @else {
      //$errors: join($errors, "Opcion no requerida.");
    }

    /*
    @if $definition_has_option {
      @if $definition_option_is_required {
        $errors: join($errors, "The value for '#{$option}' option is invalid.");
      }
      @else {
        // $errors: join($errors, "The option '#{$option}' is not required.");
      }
    }
    @else {
      @if $option_is_required {
        $errors: join($errors, "The layout option '#{$option}' is required.");
      }
    }
    */

  }

  @each $error in $errors {
    @error "Mondrian says: #{$error}";
  }

}


@mixin generate-layout($definition) {
  $name: map-get($definition, layout);

  @if      ($name == flex)       { @include       flex-layout($definition); }
  @else if ($name == fixed)      { @include      fixed-layout($definition); }
  @else if ($name == off-canvas) { @include off-canvas-layout($definition); }
  @else if ($name == stacked)    { @include    stacked-layout($definition); }
  @else    { @warn "This layout type does not exist." }
}

@mixin layout($definition) {
  @include debug($definition,"Definici√≥n");

  //@include validate-layout($definition);
  @include generate-layout($definition);
}